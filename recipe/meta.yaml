{% set name = "ward" %}
{% set version = "0.68.0b0" %}


package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/ward-{{ version }}.tar.gz
  sha256: d8aafa4ddb81f4d5787d95bdb2f7ba69a2e89f183feec78d8afcc64b2cd19ee9

build:
  number: 1
  noarch: python
  entry_points:
    - ward = ward._run:run
  script:
    - {{ PYTHON }} -m pip install . -vv

requirements:
  host:
    - pip
    - poetry-core >=1.0.0
    - python {{ python_min }}
  run:
    - click >=7.0.0,<9.0.0
    - click-completion >=0.5.2
    - click-default-group >=1.2.2
    - cucumber-tag-expressions >=2.0.0,<5.0.0
    - pluggy >=0.13.1,<2.0.0
    - pprintpp >=0.4.0
    - python >={{ python_min }}
    - rich >=12.2.0
    - tomli >=1.0.0,<3.0.0

test:
  imports:
    - ward
  commands:
    - pip check
    - ward --help
  requires:
    - pip
    - python {{ python_min }}

about:
  home: https://wardpy.com
  doc_url: https://ward.readthedocs.io/en/latest/
  dev_url: https://github.com/darrenburns/ward
  summary: A modern Python testing framework
  license: MIT
  license_file: LICENSE
  description: |
    Ward is a Python testing framework with a focus on productivity and
    readability. It gives you the tools you need to write well-documented and
    scalable tests. With Ward, you can describe your tests using strings instead
    of function names, and also use plain assert statements, with no need to
    remember assert* method names. Ward provides beautiful output that focuses
    on readability. It also manages test dependencies using a simple but
    powerful fixture system, while parameterising testing, which allows you to
    run a single test on multiple inputs. Ward has support for testing async
    code, and is supported on MacOS, Linux, and Windows. Ward is configurable
    with pyproject.toml, but works out-of-the-box with sensible defaults. It is
    also extendable via a plugin system (coming soon). Above all, Ward is speedy
    – Ward’s suite of ~300 tests completes in ~0.4 seconds on my machine.

extra:
  recipe-maintainers:
    - thewchan
